// Code generated by "stringer -type=NoticeType -linecomment -output=notice_type.string.go"; DO NOT EDIT.

package vobj

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NoticeTypeUnknown-1]
	_ = x[NoticeTypeSystem-2]
	_ = x[NoticeTypeUser-4]
	_ = x[NoticeTypeAdmin-8]
	_ = x[NoticeTypeAll-16]
}

const (
	_NoticeType_name_0 = "未知系统"
	_NoticeType_name_1 = "用户"
	_NoticeType_name_2 = "管理员"
	_NoticeType_name_3 = "所有"
)

var (
	_NoticeType_index_0 = [...]uint8{0, 6, 12}
)

func (i NoticeType) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _NoticeType_name_0[_NoticeType_index_0[i]:_NoticeType_index_0[i+1]]
	case i == 4:
		return _NoticeType_name_1
	case i == 8:
		return _NoticeType_name_2
	case i == 16:
		return _NoticeType_name_3
	default:
		return "NoticeType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

// Check if the value is in the range of the constant.
func (i NoticeType) Check() bool {
	switch {
	case 1 <= i && i <= 2:
		return true
	case i == 4:
		return true
	case i == 8:
		return true
	case i == 16:
		return true
	default:
		return false
	}
}

// IsUnknown Is it 未知
func (i NoticeType) IsUnknown() bool {
	return i == NoticeTypeUnknown
}

// IsSystem Is it 系统
func (i NoticeType) IsSystem() bool {
	return i == NoticeTypeSystem
}

// IsUser Is it 用户
func (i NoticeType) IsUser() bool {
	return i == NoticeTypeUser
}

// IsAdmin Is it 管理员
func (i NoticeType) IsAdmin() bool {
	return i == NoticeTypeAdmin
}

// IsAll Is it 所有
func (i NoticeType) IsAll() bool {
	return i == NoticeTypeAll
}

// GetValue Retrieve the raw type value.
func (i NoticeType) GetValue() int8 {
	return int8(i)
}
